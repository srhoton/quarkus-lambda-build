name: Deploy Infrastructure and Lambda

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

# Only run in production environment
jobs:
  check-environment:
    name: Check Environment
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Environment Check
        run: echo "Running in production environment"

  terraform:
    name: Deploy Infrastructure
    needs: check-environment
    runs-on: ubuntu-latest
    environment: production
    outputs:
      sqs_queue_url: ${{ steps.terraform-outputs.outputs.sqs_queue_url }}
      sqs_queue_arn: ${{ steps.terraform-outputs.outputs.sqs_queue_arn }}
      lambda_role_arn: ${{ steps.terraform-outputs.outputs.lambda_role_arn }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Format
        working-directory: ./terraform
        run: terraform fmt -check

      - name: Create terraform.tfvars
        working-directory: ./terraform
        run: |
          cat > terraform.tfvars << EOF
          aws_account_id = "${{ secrets.AWS_ACCOUNT_ID }}"
          github_repository = "${{ github.repository }}"
          EOF

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      - name: Export Terraform Outputs
        id: terraform-outputs
        working-directory: ./terraform
        run: |
          # Store outputs in files first
          terraform output -raw sqs_queue_url > sqs_url.txt
          terraform output -raw sqs_queue_arn > sqs_arn.txt
          terraform output -raw lambda_execution_role_arn > lambda_role.txt

          terraform output -raw sqs_queue_url
          terraform output -raw sqs_queue_arn
          terraform output -raw lambda_execution_role_arn

          # Read from files and set as outputs
          echo "sqs_queue_url=$(cat sqs_url.txt)" >> $GITHUB_OUTPUT
          echo "sqs_queue_arn=$(cat sqs_arn.txt)" >> $GITHUB_OUTPUT
          echo "lambda_role_arn=$(cat lambda_role.txt)" >> $GITHUB_OUTPUT
          echo "$GITHUB_OUTPUT"

  build-deploy-lambda:
    name: Build and Deploy Lambda
    needs: terraform
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
          aws-region: us-east-1

      - name: Debug Terraform outputs
        run: |
          echo "SQS Queue URL: ${{ needs.terraform.outputs.sqs_queue_url }}"
          echo "SQS Queue ARN: ${{ needs.terraform.outputs.sqs_queue_arn }}"
          echo "Lambda Role ARN: ${{ needs.terraform.outputs.lambda_role_arn }}"

      - name: Check if Lambda function exists
        id: check-lambda
        run: |
          if aws lambda get-function --function-name quarkus-lambda-build &> /dev/null; then
            echo "Lambda function exists, will update"
            echo "lambda_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Lambda function does not exist, will create"
            echo "lambda_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Lambda function
        if: steps.check-lambda.outputs.lambda_exists == 'false'
        run: |
          # Store values in variables to avoid issues with special characters
          LAMBDA_ROLE="${{ needs.terraform.outputs.lambda_role_arn }}"
          SQS_URL="${{ needs.terraform.outputs.sqs_queue_url }}"

          aws lambda create-function \
            --function-name quarkus-lambda-build \
            --zip-file fileb://build/function.zip \
            --handler io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest \
            --runtime java17 \
            --timeout 30 \
            --memory-size 512 \
            --role "$LAMBDA_ROLE" \
            --environment "Variables={SQS_QUEUE_URL=$SQS_URL}"

      - name: Update Lambda function
        if: steps.check-lambda.outputs.lambda_exists == 'true'
        run: |
          aws lambda update-function-code \
            --function-name quarkus-lambda-build \
            --zip-file fileb://build/function.zip

      - name: Update Lambda configuration
        run: |
          # Store value in variable to avoid issues with special characters
          SQS_URL="${{ needs.terraform.outputs.sqs_queue_url }}"

          aws lambda update-function-configuration \
            --function-name quarkus-lambda-build \
            --environment "Variables={SQS_QUEUE_URL=$SQS_URL}"

      - name: Create SQS event source mapping
        run: |
          # Store value in variable to avoid issues with special characters
          SQS_ARN="${{ needs.terraform.outputs.sqs_queue_arn }}"

          # Check if event source mapping exists
          MAPPINGS=$(aws lambda list-event-source-mappings \
            --function-name quarkus-lambda-build \
            --event-source-arn "$SQS_ARN" \
            --query 'EventSourceMappings[0].UUID' \
            --output text)

          if [ "$MAPPINGS" == "None" ] || [ -z "$MAPPINGS" ]; then
            echo "Creating new event source mapping"
            aws lambda create-event-source-mapping \
              --function-name quarkus-lambda-build \
              --event-source-arn "$SQS_ARN" \
              --batch-size 10
          else
            echo "Event source mapping already exists"
          fi
